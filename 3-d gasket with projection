
#include <math.h>
#include <stdlib.h>

#ifdef __APPLE__
#include <GLUT/glut.h>
#else
#include <GL/glut.h>
#endif

#define bool int
#define false 0
#define true 1

#ifndef M_PI
#define M_PI 3.14159
#endif


int 	winWidth, winHeight;
int     n=2;  //递归次数

float 	angle = 0.0, axis[3], trans[3];
bool 	trackingMouse = false;   //true,更新跟踪球位置,可删
bool 	redrawContinue = false;  //true,回调函数迫使显示窗口被重新绘制，可删
bool    trackballMove = false;   //true,更新绘图矩阵函数中使用的旋转矩阵

GLfloat p_Mlookup[16],p_CompositeTransMatrix[16];
GLfloat eye[3]={0.0,0.0,5.0};
//GLfloat M[16]={1.0,0.0,0.0,-0.1,0.0,1.0,0.0,-0.1,0.0,0.0,1.0,-0.1,0.0,0.0,0.0,1.0};


/*----------------------------------------------------------------------*/
/*
** Draw the cube.
*/
GLfloat vertices[][3]= {
    {-1.0,-1.0,1.0},{1.0,-1.0,1.0}, {0.0,-1.0,-1.0}, {0.0,1.0,0.0}
};

GLfloat colors[][3] = {
    {0.0,1.0,1.0},{1.0,1.0,0.0}, {1.0,0.0,1.0}, {0.0,1.0,0.0}, 
};

void triangle(GLfloat *a, GLfloat *b, GLfloat *c)
{
	glBegin(GL_POLYGON);
	glVertex3fv(a);
	glVertex3fv(b);
	glVertex3fv(c);
	glEnd();
}

void divide_triangle(GLfloat *a, GLfloat *b, GLfloat *c, int m)
{
	GLfloat v1[3],v2[3],v3[3];
	int i;
	if(m > 0)
	{
		for(i=0;i<3;i++) v1[i]=(a[i] + b[i]) / 2;
		for(i=0;i<3;i++) v2[i]=(a[i] + c[i]) / 2;
		for(i=0;i<3;i++) v3[i]=(b[i] + c[i]) / 2;
		divide_triangle(a,v1,v2,m-1);
		divide_triangle(v1,b,v3,m-1);
		divide_triangle(v2,v3,c,m-1);
	}
	else triangle(a,b,c);
}

void tetrahedron(int m)
{	
    glBegin(GL_POLYGON);
	glColor3fv(colors[0]);
	divide_triangle(vertices[0],vertices[1],vertices[2],m);
	glColor3fv(colors[1]);
    divide_triangle(vertices[0],vertices[1],vertices[3],m);
	glColor3fv(colors[2]);
	divide_triangle(vertices[0],vertices[2],vertices[3],m);
	glColor3fv(colors[3]);
	divide_triangle(vertices[1],vertices[2],vertices[3],m);
	glEnd();
}
/*----------------------------------------------------------------------*/
/* 
** These functions implement a simple trackball-like motion control.
*/

float lastPos[3] = {0.0F, 0.0F, 0.0F};
int curx, cury;
int startX, startY;

void trackball_ptov(int x, int y, int width, int height, float v[3])
{
    float d, a;
	
    /* project x,y onto a hemi-sphere centered within width, height */
    v[0] = (2.0F*x - width) / width;
    v[1] = (height - 2.0F*y) / height;
    d = (float) sqrt(v[0]*v[0] + v[1]*v[1]);
    v[2] = (float) cos((M_PI/2.0F) * ((d < 1.0F) ? d : 1.0F));
    a = 1.0F / (float) sqrt(v[0]*v[0] + v[1]*v[1] + v[2]*v[2]);
    v[0] *= a;
    v[1] *= a;
    v[2] *= a;
}

void mouseMotion(int x, int y)
{
    float curPos[3], dx, dy, dz;
	
    trackball_ptov(x, y, winWidth, winHeight, curPos);
	
	if(trackingMouse)
	{
		dx = curPos[0] - lastPos[0];
		dy = curPos[1] - lastPos[1];
		dz = curPos[2] - lastPos[2];
		
		if (dx || dy || dz) {
			angle = 90.0F * sqrt(dx*dx + dy*dy + dz*dz);
			
			axis[0] = lastPos[1]*curPos[2] - lastPos[2]*curPos[1];
			axis[1] = lastPos[2]*curPos[0] - lastPos[0]*curPos[2];
			axis[2] = lastPos[0]*curPos[1] - lastPos[1]*curPos[0];
			
			lastPos[0] = curPos[0];
			lastPos[1] = curPos[1];
			lastPos[2] = curPos[2];
		}
	} 
    glutPostRedisplay();
}

void startMotion(int x, int y)
{
	
    trackingMouse = true;
    redrawContinue = false;
    startX = x; startY = y;
    curx = x; cury = y;
    trackball_ptov(x, y, winWidth, winHeight, lastPos);
	trackballMove=true;
}

void stopMotion(int x, int y)
{
	
    trackingMouse = false;
	
    if (startX != x || startY != y) {
		redrawContinue = true;
    } else {
		angle = 0.0F;
		redrawContinue = false;
		trackballMove = false;
    }
}
/*----------------------------------------------------------------------*/
/* 
** Menu for Projection
*/
void Ortho_Projection(int w, int h)
{
	glViewport(0,0,w,h);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	glOrtho(-2.0,2.0,-2.0,2.0,2.0,10.0);
	glMatrixMode(GL_MODELVIEW);
	glutPostRedisplay();
}

void Perspective_Projection(int w, int h)
{
	glViewport(0,0,w,h);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluPerspective(50.0,w/h,2.0,20.0);
	glMatrixMode(GL_MODELVIEW);
	glutPostRedisplay();
}

void projectOption (int option)
{
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	switch (option)
	{
	case 1: 
		Ortho_Projection(winWidth,winHeight);
		break;
	case 2:		
		Perspective_Projection(winWidth,winHeight);			
		break;
	default:
		break;
	}
}
/*----------------------------------------------------------------------*/
void display(void)
{
	glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);

    /* view transform */
    if (trackballMove) {

		glRotatef(angle,axis[0],axis[1],axis[2]);
		//glMultMatrixf(M);
		//glGetFloatv(GL_MODELVIEW_MATRIX,M);
    }
	tetrahedron(n);
    glutSwapBuffers();
}
/*----------------------------------------------------------------------*/
/*通过键盘按键实现漫游效果*/
void keys(unsigned char key, int x, int y)
{	
	if(key=='x') eye[0]+=1.0;
	if(key=='X') eye[0]-=1.0;
	if(key=='y') eye[1]+=1.0;
	if(key=='Y') eye[1]-=1.0;
	if(key=='z') eye[2]+=1.0;
	if(key=='Z') eye[2]-=1.0;
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
	gluLookAt(eye[0],eye[1],eye[2],0.0,0.0,0.0,0.0,1.0,0.0);
	display();
	
}
/*----------------------------------------------------------------------*/

void mouseButton(int button, int state, int x, int y)
{
	if(button==GLUT_RIGHT_BUTTON) exit(0);
	if(button==GLUT_LEFT_BUTTON) switch(state) 
	{
    case GLUT_DOWN:
		//y=winHeight-y;  //此处y就是y，因为trackball_ptov中变换之前采用的坐标系为窗口坐标系，不是笛卡尔坐标系
		startMotion( x,y);
		break;
    case GLUT_UP:
		stopMotion( x,y);
		break;
    } 
}

void myReshape(int w, int h)
{
    glViewport(0, 0, w, h);
    winWidth = w;
    winHeight = h;
}

void spinCube()
{
	
    if (redrawContinue) 
	{
		angle=-0.1;	
		glutPostRedisplay();
	}
}

void main(int argc, char **argv)
{
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);
    glutInitWindowSize(500, 500);
    glutCreateWindow("colorcube");
    glutReshapeFunc(myReshape);
    glutDisplayFunc(display);
    glutIdleFunc(spinCube);
    glutMouseFunc(mouseButton);
    glutMotionFunc(mouseMotion);
	glutKeyboardFunc(keys);
	
	glutCreateMenu(projectOption);
	glutAddMenuEntry("正投影",1);
	glutAddMenuEntry("透视投影",2);
	glutAttachMenu(GLUT_RIGHT_BUTTON);
	
	glEnable(GL_DEPTH_TEST); 
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
	glOrtho(-2.0, 2.0, -2.0, 2.0, 2.0, 10.0);
    glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
	gluLookAt(eye[0],eye[1],eye[2],0.0,0.0,0.0,0.0,1.0,0.0);
    glutMainLoop();
}


